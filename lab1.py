###########################
# DO NOT MODIFY THIS PART #
# BUT YOU SHOULD READ IT  #
###########################
from heapq import *

class Node:
    """
    Huffman tree node definition.
    """
    def __init__(self, symbol=None, count=0, left=None, right=None):
        """
        initialization
          symbol   : symbol to be coded
          count    : count of symbol
          left     : left child node
          right    : right child node
        """
        self.__left = left
        self.__right = right
        self.__symbol = symbol
        self.__count = count
        self.__code_word = ''

    def setLeft(self, l):
        """
        sets the left child of current node
        """
        self.__left = l
    
    def setRight(self, r):
        """
        sets the right child of current node
        """
        self.__right = r
    
    def getLeft(self):
        """
        returns the left child of current node
        """
        return self.__left
    
    def getRight(self):
        """
        returns the right child of current node
        """
        return self.__right

    def setSymbol(self, symbol):
        """
        sets coding symbol of current node
        """
        self.__symbol = symbol

    def getSymbol(self):
        """
        returns coding symbol of current node
        """
        return self.__symbol

    def setCount(self, count):
        """
        sets count of the symbol
        """
        self.__count = count

    def getCount(self):
        """
        returns count of the symbol
        """
        return self.__count
    
    def setCodeWord(self, code_word):
        """
        sets code-word of the symbol
        """
        self.__code_word = code_word

    def getCodeWord(self):
        """
        returns code-word of the symbol
        """
        return self.__code_word

    def __lt__(self, node):
        return self.__count < node.getCount()

    def __repr__(self):
        return "symbol: {}, count: {}, code-word: {}".format(self.__symbol, self.__count, self.__code_word)

###########################
# DO NOT MODIFY THIS PART #
# BUT YOU SHOULD READ IT  #
###########################



##############################
# FINISH THE BELOW FUNCTIONS #
##############################
#References:
#1. https://en.wikipedia.org/wiki/Huffman_coding

def buildDictionary(message):
    """
    counts the occurrence of every symbol in the message and store it in a python dictionary
      parameter:
        message: input message string
      return:
        python dictionary, key = symbol, value = occurrence
    """
    dict = {}
    for char in message:
        if char in dict:
            dict[char] += 1
        else:
            dict[char] = 1
    return dict

def buildHuffmanTree(word_dict):
    """
    uses the word dictionary to generate a huffman tree using a min heap
      parameter:
        word_dict  : word dictionary generated by buildDictionary()
      return:
        root node of the huffman tree
    """
    minHeap = []
    for char in word_dict.keys():
        node = Node(char, word_dict[char], None, None)
        minHeap.append(node)
    heapify(minHeap)
    while len(minHeap) > 1:
        minA = heappop(minHeap)
        minB = heappop(minHeap)
        internalNode = Node(None, minA.getCount() + minB.getCount(), minA, minB)
        heappush(minHeap, internalNode)
    return minHeap[0]

def assignCodeWord(root, code_word=''):
    """
    recursively assigns code-word to the nodes in the huffman tree
      parameter:
        root       : root node of the huffman tree
        code_word  : code-word for the root node
      return:
        no return
    """
    root.setCodeWord(code_word)
    if root.getSymbol() is None:
        left = root.getLeft()
        right = root.getRight()
        assignCodeWord(left, code_word + '0')
        assignCodeWord(right, code_word + '1')

def huffmanEncode(message):
    """
    converts the input message into huffman code
      parameter:
        message    : input message string
      return:
        a tuple, the first element is the huffman code string for the input message,
        the second element is the huffman tree root node
    """
    dict = buildDictionary(message)
    rootNode = buildHuffmanTree(dict)
    assignCodeWord(rootNode,'')
    encodedString = ""
    for ch in message:
        encodedString += str(findCodeWord(rootNode, ch))
    return encodedString, rootNode

def findCodeWord(root, symbol):
    """
    find the codeword in the huffman tree given a symbol
      parameter:
        root     : the huffman tree root node
        symbol   : the symbol to be coded
      return:
        the codeword of the given symbol
    """

    if root is None: return

    if root.getLeft() is None and root.getRight() is None and root.getSymbol() == symbol:
        # reach leaf node here
        return root.getCodeWord()
    else:
        # traverse the huffman tree
        codeWord = findCodeWord(root.getLeft(), symbol)
        if codeWord is not None:
            return codeWord
        codeWord = findCodeWord(root.getRight(), symbol)
        if codeWord is not None:
            return codeWord

    return

def huffmanDecode(message, huffman_tree):
    """
    decode the message
      parameter:
        message      : input huffman code string
        huffman_tree : huffman tree root node
      return:
        decoded message
    """
    decodedString = ""
    code = ""
    for ch in message:
        code += ch
        if findSymbol(huffman_tree, code) is not None:
            decodedString += str(findSymbol(huffman_tree, code))
            code = ""
    return decodedString

def findSymbol(root, codeWord):
    """
    find the symbol in the huffman tree given a codeWord
      parameter:
        root     : the huffman tree root node
        codeWord   : the codeWord to be decoded
      return:
        the symbol of the given codeWord
    """

    if root is None: return

    if root.getLeft() is None and root.getRight() is None and root.getCodeWord() == codeWord:
        # reach leaf node here
        return root.getSymbol()
    else:
        # traverse the huffman tree
        symbol = findSymbol(root.getLeft(), codeWord)
        if symbol is not None:
            return symbol
        symbol = findSymbol(root.getRight(), codeWord)
        if symbol is not None:
            return symbol

    return

def main():
    """
    main process goes here
    """
    message = input("Please enter a message:")
    encodedMessage, huffmanTreeRootNode = huffmanEncode(message)
    print("The huffman code is: ", encodedMessage)
    print("The length of the huffman code is: ", len(encodedMessage))
    decodedMessage = huffmanDecode(encodedMessage, huffmanTreeRootNode)
    print("The decoded message is: ", decodedMessage)

##############################
# FINISH THE ABOVE FUNCTIONS #
##############################


###########################
# DO NOT MODIFY THIS PART #
###########################
if __name__ == "__main__":
    main()
###########################
# DO NOT MODIFY THIS PART #
###########################